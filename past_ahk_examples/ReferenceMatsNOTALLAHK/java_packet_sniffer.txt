	

    package com;
     
    import java.nio.*;
    import java.util.*;
     
    import com.handlers.*;
    import com.listeners.*;
     
     
    public class PacketIn implements CONSTANTS{
     
            public static ArrayList<PacketListener> packetInListeners = new ArrayList<PacketListener>();
     
            //this buffer doesnt have the PacketSize short on the front
            public PacketIn(ByteBuffer b){
                    //only call too b allowed//this stops tampering with Wurms packets
                    ByteBuffer bb = ByteBuffer.wrap(b.array());
                    byte packetID = bb.get();
                    //System.out.println("WO PACKETIN = " + packetID);
                    //System.out.println("packet info = " + bb);
                    parsePacket(packetID,bb,b);//b added for the ability too tamper with packets
                    for(PacketListener pl : packetInListeners){
                            pl.onPacketEvent(b,true);//using b, gives packetListeners the ability to edit packets
                    }
            }
     
            public void parsePacket(byte ID, ByteBuffer bb, ByteBuffer b){
                    switch(ID){
                            case CHATMESSAGE_IN:
                                    ChatHandler.sendChatMessage(bb);
                            break;
                            case TERRAIN_IN:
                                    TerrainHandler.sendTerrain(bb);
                            break;
                            case FAR_IN:
                                    TerrainHandler.sendFar(bb);
                            break;
                            case MINE_IN:
                                    TerrainHandler.sendMine(bb);
                            break;
                            case MENU_IN:
                                    MenuHandler.getMenu(bb);
                                    EventMethods.requestByte++;
                                    EventMethods.methodFlag = true;
                            break;
                            case NPCREMOVE_IN:
                                    NPCHandler.handleRemove(bb);
                            break;
                            case NPCHEALTH_IN:
                                    NPCHandler.handleHealth(bb);
                            break;
                            case REMOBJ_IN:
                                    ObjectHandler.handleRemove(bb);
                            break;
                            case ADDOBJ_IN:
                                    ObjectHandler.handleAdd(bb);
                            break;
                            case NPCADD_IN:
                                    NPCHandler.handleAdd(bb);
                            break;
                            case NPCMOVE_IN:
                                    NPCHandler.doPositionUpdate(bb);
                            break;
                            case INVADD_IN:
                                    PlayerInventory.handleAddPacket(bb);
                            break;
                            case INVUPD_IN:
                                    PlayerInventory.handleUpdatePacket(bb);
                            break;
                            case INVREM_IN:
                                    PlayerInventory.handleRemovePacket(bb);
                            break;
                    case FOOD_IN://food
                    StaticPlayerPos.food = (float)(((((float)(bb.getShort() & 0xffff)/65535.0F)*100.0F)-100.0F)*-1.0F);
                    StaticPlayerPos.nutrition = bb.get();
                break;
                    case WATER_IN: // water
                    StaticPlayerPos.water = (float)((((((float)(bb.getShort() & 0xffff)/65535.0F)*100.0F))-100.0F)*-1.0F);
                break;
                case STAMINAHEALTH_IN://stmina and health
                    StaticPlayerPos.stamina = (float)((((((float)(bb.getShort() & 0xffff)/65535.0F)*100.0F))));
    //System.out.println(StaticPlayerPos.stamina + "Stamina");
                    StaticPlayerPos.health =  (float)((((((float)(bb.getShort() & 0xffff)/65535.0F)*100.0F))-100.0F)*-1.0F);
                break;
                case TIMERCHANGE_IN:
                    short timer = bb.getShort();
                    if(timer  < 0){
                                            StaticPlayerPos.isTimer = false;
                                    }else{
                                            StaticPlayerPos.isTimer = true;
                                    }
                break;
                case TIMER_IN:
                    byte[] bzz = new byte[bb.get()];
                    bb.get(bzz);
                    String action = new String(bzz);
                    System.out.println("Doing Action = " + action);
                    short time = bb.getShort();
                    if(time < 1){
                                    StaticPlayerPos.isTimer = false;
                                    }else{
                                            StaticPlayerPos.isTimer = true;
                                    }
                                    if(bzz.length <= 1){
                                            StaticPlayerPos.isTimer = false;
                                    }
                break;
                case BML_IN:
                    BMLWriter.incoming(bb);
                break;
                case GAMETIME_IN:
                    GameTime.edit(b);
                break;
                case SKILL_IN:
                    SkillHandler.addSkill(bb);
                break;
                case SKILLUPDATE_IN:
                    SkillHandler.setSkill(bb);
                break;
                    }
            }
    }

